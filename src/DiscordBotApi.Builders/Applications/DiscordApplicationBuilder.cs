// -------------------------------------------------------------------------------------------------
// <copyright file="DiscordApplicationBuilder.cs" company="kpop.fan">
//   Copyright (c) 2025 kpop.fan. All rights reserved.
// </copyright>
// -------------------------------------------------------------------------------------------------

namespace DiscordBotApi.Builders.Applications;

// WARNING! This file was generated by a tool.
//          Any changes made to this file will be lost if the code is regenerated.
public class DiscordApplicationBuilder
{
	private bool _botPublic = default!;
	private bool _botRequireCodeGrant = default!;
	private string? _customInstallUrl;
	private DiscordApplicationFlags? _flags;
	private ulong _id = default!;
	private DiscordInstallParams? _installParams;
	private string _name = default!;
	private DiscordUser? _owner;
	private List<string>? _tags;

	public DiscordApplicationBuilder WithBotPublic(bool botPublic)
	{
		_botPublic = botPublic;
		return this;
	}

	public DiscordApplicationBuilder WithBotRequireCodeGrant(bool botRequireCodeGrant)
	{
		_botRequireCodeGrant = botRequireCodeGrant;
		return this;
	}

	public DiscordApplicationBuilder WithCustomInstallUrl(string? customInstallUrl)
	{
		_customInstallUrl = customInstallUrl;
		return this;
	}

	public DiscordApplicationBuilder WithFlags(DiscordApplicationFlags? flags)
	{
		_flags = flags;
		return this;
	}

	public DiscordApplicationBuilder WithId(ulong id)
	{
		_id = id;
		return this;
	}

	public DiscordApplicationBuilder WithInstallParams(DiscordInstallParams? installParams)
	{
		_installParams = installParams;
		return this;
	}

	public DiscordApplicationBuilder WithName(string name)
	{
		_name = name;
		return this;
	}

	public DiscordApplicationBuilder WithOwner(DiscordUser? owner)
	{
		_owner = owner;
		return this;
	}

	public DiscordApplicationBuilder AddTag(string tag)
	{
		_tags ??= new List<string>();
		_tags.Add(item: tag);
		return this;
	}

	public DiscordApplication Build() =>
		new()
		{
			BotPublic = _botPublic,
			BotRequireCodeGrant = _botRequireCodeGrant,
			CustomInstallUrl = _customInstallUrl,
			Flags = _flags,
			Id = _id,
			InstallParams = _installParams,
			Name = _name,
			Owner = _owner,
			Tags = _tags?.ToImmutableArray(),
		};
}