// -------------------------------------------------------------------------------------------------
// <copyright file="DiscordMessageBuilder.cs" company="kpop.fan">
//   Copyright (c) 2025 kpop.fan. All rights reserved.
// </copyright>
// -------------------------------------------------------------------------------------------------

namespace DiscordBotApi.Builders.Guilds.Channels.Messages;

// WARNING! This file was generated by a tool.
//          Any changes made to this file will be lost if the code is regenerated.
public class DiscordMessageBuilder
{
	private readonly List<DiscordMessageAttachment> _attachments = new();
	private DiscordUser _author = default!;
	private List<DiscordMessageActionRow>? _components;
	private string _content = default!;
	private DateTime? _editedTimestamp;
	private readonly List<DiscordEmbed> _embeds = new();
	private DiscordMessageFlags? _flags;
	private ulong? _guildId;
	private DiscordGuildMember? _member;
	private readonly List<DiscordUser> _mentions = new();
	private DiscordMessageReference? _messageReference;
	private string? _nonce;
	private bool _pinned = default!;
	private List<DiscordReaction>? _reactions;
	private DiscordMessage? _referencedMessage;
	private DiscordChannel? _thread;
	private DateTime _timestamp = default!;
	private DiscordMessageType _type = default!;
	private ulong _channelId = default!;
	private ulong _id = default!;

	public DiscordMessageBuilder AddAttachment(Action<DiscordMessageAttachmentBuilder> builderAction)
	{
		var builder = new DiscordMessageAttachmentBuilder();
		builderAction(obj: builder);
		_attachments.Add(item: builder.Build());
		return this;
	}

	public DiscordMessageBuilder AddAttachment(DiscordMessageAttachment item)
	{
		_attachments.Add(item: item);
		return this;
	}

	public DiscordMessageBuilder WithAuthor(DiscordUser author)
	{
		_author = author;
		return this;
	}

	public DiscordMessageBuilder AddComponent(Action<DiscordMessageActionRowBuilder> builderAction)
	{
		var builder = new DiscordMessageActionRowBuilder();
		builderAction(obj: builder);
		_components ??= new List<DiscordMessageActionRow>();
		_components.Add(item: builder.Build());
		return this;
	}

	public DiscordMessageBuilder AddComponent(DiscordMessageActionRow item)
	{
		_components ??= new List<DiscordMessageActionRow>();
		_components.Add(item: item);
		return this;
	}

	public DiscordMessageBuilder WithContent(string content)
	{
		_content = content;
		return this;
	}

	public DiscordMessageBuilder WithEditedTimestamp(DateTime? editedTimestamp)
	{
		_editedTimestamp = editedTimestamp;
		return this;
	}

	public DiscordMessageBuilder AddEmbed(Action<DiscordEmbedBuilder> builderAction)
	{
		var builder = new DiscordEmbedBuilder();
		builderAction(obj: builder);
		_embeds.Add(item: builder.Build());
		return this;
	}

	public DiscordMessageBuilder AddEmbed(DiscordEmbed item)
	{
		_embeds.Add(item: item);
		return this;
	}

	public DiscordMessageBuilder WithFlags(DiscordMessageFlags? flags)
	{
		_flags = flags;
		return this;
	}

	public DiscordMessageBuilder WithGuildId(ulong? guildId)
	{
		_guildId = guildId;
		return this;
	}

	public DiscordMessageBuilder WithMember(DiscordGuildMember? member)
	{
		_member = member;
		return this;
	}

	public DiscordMessageBuilder AddMention(Action<DiscordUserBuilder> builderAction)
	{
		var builder = new DiscordUserBuilder();
		builderAction(obj: builder);
		_mentions.Add(item: builder.Build());
		return this;
	}

	public DiscordMessageBuilder AddMention(DiscordUser item)
	{
		_mentions.Add(item: item);
		return this;
	}

	public DiscordMessageBuilder WithMessageReference(DiscordMessageReference? messageReference)
	{
		_messageReference = messageReference;
		return this;
	}

	public DiscordMessageBuilder WithNonce(string? nonce)
	{
		_nonce = nonce;
		return this;
	}

	public DiscordMessageBuilder WithPinned(bool pinned)
	{
		_pinned = pinned;
		return this;
	}

	public DiscordMessageBuilder AddReaction(Action<DiscordReactionBuilder> builderAction)
	{
		var builder = new DiscordReactionBuilder();
		builderAction(obj: builder);
		_reactions ??= new List<DiscordReaction>();
		_reactions.Add(item: builder.Build());
		return this;
	}

	public DiscordMessageBuilder AddReaction(DiscordReaction item)
	{
		_reactions ??= new List<DiscordReaction>();
		_reactions.Add(item: item);
		return this;
	}

	public DiscordMessageBuilder WithReferencedMessage(DiscordMessage? referencedMessage)
	{
		_referencedMessage = referencedMessage;
		return this;
	}

	public DiscordMessageBuilder WithThread(DiscordChannel? thread)
	{
		_thread = thread;
		return this;
	}

	public DiscordMessageBuilder WithTimestamp(DateTime timestamp)
	{
		_timestamp = timestamp;
		return this;
	}

	public DiscordMessageBuilder WithType(DiscordMessageType type)
	{
		_type = type;
		return this;
	}

	public DiscordMessageBuilder WithChannelId(ulong channelId)
	{
		_channelId = channelId;
		return this;
	}

	public DiscordMessageBuilder WithId(ulong id)
	{
		_id = id;
		return this;
	}

	public DiscordMessage Build() =>
		new()
		{
			Attachments = _attachments.ToImmutableArray(),
			Author = _author,
			Components = _components?.ToImmutableArray(),
			Content = _content,
			EditedTimestamp = _editedTimestamp,
			Embeds = _embeds.ToImmutableArray(),
			Flags = _flags,
			GuildId = _guildId,
			Member = _member,
			Mentions = _mentions.ToImmutableArray(),
			MessageReference = _messageReference,
			Nonce = _nonce,
			Pinned = _pinned,
			Reactions = _reactions?.ToImmutableArray(),
			ReferencedMessage = _referencedMessage,
			Thread = _thread,
			Timestamp = _timestamp,
			Type = _type,
			ChannelId = _channelId,
			Id = _id,
		};
}