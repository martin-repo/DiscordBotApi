// -------------------------------------------------------------------------------------------------
// <copyright file="DiscordUpdatedMessageBuilder.cs" company="kpop.fan">
//   Copyright (c) 2025 kpop.fan. All rights reserved.
// </copyright>
// -------------------------------------------------------------------------------------------------

namespace DiscordBotApi.Builders.Guilds.Channels.Messages;

// WARNING! This file was generated by a tool.
//          Any changes made to this file will be lost if the code is regenerated.
public class DiscordUpdatedMessageBuilder
{
	private List<DiscordMessageAttachment>? _attachments;
	private DiscordUser? _author;
	private List<DiscordMessageActionRow>? _components;
	private string? _content;
	private DateTime? _editedTimestamp;
	private List<DiscordEmbed>? _embeds;
	private ulong? _guildId;
	private bool? _pinned;
	private List<DiscordReaction>? _reactions;
	private DiscordChannel? _thread;
	private DateTime? _timestamp;
	private ulong _channelId = default!;
	private ulong _id = default!;

	public DiscordUpdatedMessageBuilder AddAttachment(Action<DiscordMessageAttachmentBuilder> builderAction)
	{
		var builder = new DiscordMessageAttachmentBuilder();
		builderAction(obj: builder);
		_attachments ??= new List<DiscordMessageAttachment>();
		_attachments.Add(item: builder.Build());
		return this;
	}

	public DiscordUpdatedMessageBuilder AddAttachment(DiscordMessageAttachment item)
	{
		_attachments ??= new List<DiscordMessageAttachment>();
		_attachments.Add(item: item);
		return this;
	}

	public DiscordUpdatedMessageBuilder WithAuthor(DiscordUser? author)
	{
		_author = author;
		return this;
	}

	public DiscordUpdatedMessageBuilder AddComponent(Action<DiscordMessageActionRowBuilder> builderAction)
	{
		var builder = new DiscordMessageActionRowBuilder();
		builderAction(obj: builder);
		_components ??= new List<DiscordMessageActionRow>();
		_components.Add(item: builder.Build());
		return this;
	}

	public DiscordUpdatedMessageBuilder AddComponent(DiscordMessageActionRow item)
	{
		_components ??= new List<DiscordMessageActionRow>();
		_components.Add(item: item);
		return this;
	}

	public DiscordUpdatedMessageBuilder WithContent(string? content)
	{
		_content = content;
		return this;
	}

	public DiscordUpdatedMessageBuilder WithEditedTimestamp(DateTime? editedTimestamp)
	{
		_editedTimestamp = editedTimestamp;
		return this;
	}

	public DiscordUpdatedMessageBuilder AddEmbed(Action<DiscordEmbedBuilder> builderAction)
	{
		var builder = new DiscordEmbedBuilder();
		builderAction(obj: builder);
		_embeds ??= new List<DiscordEmbed>();
		_embeds.Add(item: builder.Build());
		return this;
	}

	public DiscordUpdatedMessageBuilder AddEmbed(DiscordEmbed item)
	{
		_embeds ??= new List<DiscordEmbed>();
		_embeds.Add(item: item);
		return this;
	}

	public DiscordUpdatedMessageBuilder WithGuildId(ulong? guildId)
	{
		_guildId = guildId;
		return this;
	}

	public DiscordUpdatedMessageBuilder WithPinned(bool? pinned)
	{
		_pinned = pinned;
		return this;
	}

	public DiscordUpdatedMessageBuilder AddReaction(Action<DiscordReactionBuilder> builderAction)
	{
		var builder = new DiscordReactionBuilder();
		builderAction(obj: builder);
		_reactions ??= new List<DiscordReaction>();
		_reactions.Add(item: builder.Build());
		return this;
	}

	public DiscordUpdatedMessageBuilder AddReaction(DiscordReaction item)
	{
		_reactions ??= new List<DiscordReaction>();
		_reactions.Add(item: item);
		return this;
	}

	public DiscordUpdatedMessageBuilder WithThread(DiscordChannel? thread)
	{
		_thread = thread;
		return this;
	}

	public DiscordUpdatedMessageBuilder WithTimestamp(DateTime? timestamp)
	{
		_timestamp = timestamp;
		return this;
	}

	public DiscordUpdatedMessageBuilder WithChannelId(ulong channelId)
	{
		_channelId = channelId;
		return this;
	}

	public DiscordUpdatedMessageBuilder WithId(ulong id)
	{
		_id = id;
		return this;
	}

	public DiscordUpdatedMessage Build() =>
		new()
		{
			Attachments = _attachments?.ToImmutableArray(),
			Author = _author,
			Components = _components?.ToImmutableArray(),
			Content = _content,
			EditedTimestamp = _editedTimestamp,
			Embeds = _embeds?.ToImmutableArray(),
			GuildId = _guildId,
			Pinned = _pinned,
			Reactions = _reactions?.ToImmutableArray(),
			Thread = _thread,
			Timestamp = _timestamp,
			ChannelId = _channelId,
			Id = _id,
		};
}